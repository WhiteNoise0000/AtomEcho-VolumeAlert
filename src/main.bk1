#include <M5Atom.h>
#include <driver/i2s.h>

#include "AudioFileSourceID3.h"
#include "AudioFileSourceSPIFFS.h"
#include "AudioGeneratorMP3.h"
#include "AudioOutputI2S.h"
#include "SPIFFS.h"

#define CONFIG_I2S_BCK_PIN 19
#define CONFIG_I2S_LRCK_PIN 33
#define CONFIG_I2S_DATA_PIN 22
#define CONFIG_I2S_DATA_IN_PIN 23

#define SPEAKER_I2S_NUMBER I2S_NUM_0

#define MODE_MIC 0
#define MODE_SPK 1
#define DATA_SIZE 1024

#define VOLUME_THRESHOLD 170

AudioGeneratorMP3 *mp3;
AudioFileSourceSPIFFS *file;
AudioOutputI2S *out;
AudioFileSourceID3 *id3;

bool InitI2SSpeakerOrMic(int mode) {
  esp_err_t err = ESP_OK;
  uint32_t sampleRate = mode == MODE_MIC ? 8000 : 16000;

  i2s_driver_uninstall(SPEAKER_I2S_NUMBER);
  i2s_config_t i2s_config = {
      .mode = (i2s_mode_t)(I2S_MODE_MASTER),
      .sample_rate = sampleRate,
      .bits_per_sample =
          I2S_BITS_PER_SAMPLE_16BIT,  // is fixed at 12bit, stereo, MSB
      .channel_format = I2S_CHANNEL_FMT_ALL_RIGHT,
      .communication_format = I2S_COMM_FORMAT_I2S,
      .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
      .dma_buf_count = 6,
      .dma_buf_len = 60,
  };

  if (mode == MODE_MIC) {
    i2s_config.mode =
        (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX | I2S_MODE_PDM);
  } else {
    i2s_config.mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX);
    i2s_config.use_apll = false;
    i2s_config.tx_desc_auto_clear = true;
  }

  err += i2s_driver_install(SPEAKER_I2S_NUMBER, &i2s_config, 0, NULL);
  i2s_pin_config_t tx_pin_config;

  tx_pin_config.bck_io_num = CONFIG_I2S_BCK_PIN;
  tx_pin_config.ws_io_num = CONFIG_I2S_LRCK_PIN;
  tx_pin_config.data_out_num = CONFIG_I2S_DATA_PIN;
  tx_pin_config.data_in_num = CONFIG_I2S_DATA_IN_PIN;

  err += i2s_set_pin(SPEAKER_I2S_NUMBER, &tx_pin_config);
  err += i2s_set_clk(SPEAKER_I2S_NUMBER, sampleRate, I2S_BITS_PER_SAMPLE_16BIT,
                     I2S_CHANNEL_MONO);

  return true;
}

void setup() {
  M5.begin(true, false, true);
  Serial.begin(115200);
  SPIFFS.begin();
  delay(50);
  Serial.println();
  // 注意音声(mp3)
  file = new AudioFileSourceSPIFFS("/alert.mp3");
  id3 = new AudioFileSourceID3(file);
  mp3 = new AudioGeneratorMP3();
}

void playAlert() {
  M5.dis.drawpix(0, CRGB(0, 128, 0));
  // InitI2SSpeakerOrMic(MODE_SPK);

  i2s_driver_uninstall(SPEAKER_I2S_NUMBER);
  out = new AudioOutputI2S();
  out->SetPinout(CONFIG_I2S_BCK_PIN, CONFIG_I2S_LRCK_PIN, CONFIG_I2S_DATA_PIN);
  out->SetChannels(1);
  out->SetGain(0.6);
  out->SetRate(16000);

  // 注意音声を流す
  Serial.println("Play");
  mp3->begin(id3, out);
  while (mp3->isRunning()) {
    if (!mp3->loop()) {
      mp3->stop();
      break;
    }
  }
}

size_t byte_read;
uint8_t recBuffer[DATA_SIZE];

void loop() {
  M5.dis.drawpix(0, CRGB(128, 128, 0));

  // マイクから音声入力
  InitI2SSpeakerOrMic(MODE_MIC);
  i2s_read(SPEAKER_I2S_NUMBER, (char *)recBuffer, DATA_SIZE, &byte_read,
           (100 / portTICK_RATE_MS));

  // 平均を取ってゼロ点を自動的に補正する
  float base = 0;
  for (int n = 0; n < byte_read; n++) {
    base += recBuffer[n];
  }
  base /= byte_read;

  // フィルタをかけて変化を緩やかにする
  const float alpha = 0.98;
  float filteredBase = filteredBase * alpha + base * (1 - alpha);

  // 二乗平均平方根を取る
  float power = 0;
  for (int n = 0; n < byte_read; n++) {
    power += sq(recBuffer[n] - filteredBase);
  }
  power = sqrt(power / byte_read);

  // 音量レベル取得
  Serial.printf("p:%f\n", power);

  // 閾値を超える場合は注意音声
  if (power > VOLUME_THRESHOLD) {
    playAlert();
    // 30秒は再警告しない
    delay(30 * 1000);
  } else {
    delay(10);
  }

  M5.update();
}